package problems.problems10to19;

import java.math.BigInteger;
import java.util.Collection;

import util.Factors;

public class Problem12 {

	/**
	 * The sequence of triangle numbers is generated by adding the natural numbers. 
	 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
	 * The first ten terms would be:
	 * 
	 *           1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	 * 
	 * Let us list the factors of the first seven triangle numbers:
	 * 
	 * 1: 1
	 * 3: 1,3
	 * 6: 1,2,3,6
	 * 10: 1,2,5,10
	 * 15: 1,3,5,15
	 * 21: 1,3,7,21
	 * 28: 1,2,4,7,14,28
	 * 
	 * We can see that 28 is the first triangle number to have over five divisors.
	 * 
	 * What is the value of the first triangle number to have over five hundred divisors?
	 * 
	 */
	public static void main(String[] args) {
		// this is extremely slow, it must be improved by the use of dynamic programming
		bruteForce(new BigInteger("100"));
	}

	private static void bruteForce(BigInteger limit) {
		BigInteger max = BigInteger.ZERO;
		BigInteger tNum = BigInteger.ZERO;
		
		for (BigInteger i = new BigInteger("2"); max.compareTo(limit) < 0; i = i.add(BigInteger.ONE)) {
			tNum = getTriangularNumber(i);
			
			BigInteger num = multiplyPlusOne(Factors.decompose(tNum).values());
			if (max.compareTo(num) < 0) {
				max = num;
			}
			
//			System.out.println(tNum + ": " + num);
		}
		
		System.out.println(tNum); // 76576500
	}

	private static BigInteger multiplyPlusOne(Collection<BigInteger> values) {
		BigInteger result = BigInteger.ONE;
		for (BigInteger v : values) {
			result = result.multiply(v.add(BigInteger.ONE));
		}
		
		return result;
	}

	private static BigInteger getTriangularNumber(BigInteger max) {
		return max.multiply(max.add(BigInteger.ONE)).divide(new BigInteger("2"));
	}
	
}
